library(reshape2)
library(dplyr)
library(RJSONIO)
library("ggplot2", lib.loc="~/R/win-library/3.2")
detach("package:ggplot2", unload=TRUE)
wind_spiral_plot_formatted(subset(batter_data.OD.decoded,stadium="Wrigley Field"))
library("ggplot2", lib.loc="~/R/win-library/3.2")
wind_spiral_plot_formatted(subset(batter_data.OD.decoded,stadium="Wrigley Field"))
batter_data.OD.decoded.wrigley = subset(batter_data.OD.decoded,stadium="Wrigley Field")
View(batter_data.OD.decoded.wrigley)
batter_data.OD.decoded.wrigley = subset(batter_data.OD.decoded,stadium=="Wrigley Field"
)
wind_spiral_plot_formatted(subset(batter_data.OD.decoded,stadium=="Wrigley Field"))
batter_data = read.csv("baseball_batter.csv",stringsAsFactors = FALSE)
pitcher_data = read.csv("baseball_pitcher.csv",stringsAsFactors = FALSE)
open_air_stadiums = read.csv("open_air_stadiums.csv")
#install.packages("ggplot2",repos='http://cran.us.r-project.org')
#install.packages("dplyr",repos='http://cran.us.r-project.org')
#install.packages("RJSONIO",repos='http://cran.us.r-project.org')
#install.packages("devtools",repos='http://cran.us.r-project.org')
library(ggplot2)
library(reshape2)
library(dplyr)
library(RJSONIO)
naIfnull <- function(x){if(!is.null(x)) x else NA}
isnumeric <- function(x) is.numeric(x) & !is.na(x)
multi_hist <- function(data_cols,df){
d <- melt(df[,data_cols])
ggplot(d,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram()
}
decode_wg_weather<-function(df){
df.OD <-subset(df ,df$stadium %in% open_air_stadiums[,c("Stadium")] & df$wunderground_forecast !="") #Filter player data for only stadiums that are open air only and remove weather rows
vals <- lapply(df.OD$wunderground_forecast,fromJSON)
#Transform decoded json vals into dataframe with select fields
res <- do.call(rbind,
lapply(vals,FUN=function(v){ v <- as.list(v)
data.frame(wind_speed = naIfnull(v$wind[1]),
wind_dir = naIfnull(v$wind[2]),
temp =naIfnull(v$temp),
humidity  =naIfnull(v$humidity))}))
return (cbind(df.OD,res)) #Add weather dataframe to original and return result
}
ggplot(batter_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-2, 15)) +
geom_histogram(binwidth = 0.25)
summary(batter_data$FD_points)
ggplot(pitcher_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-7, 25)) +
geom_histogram(binwidth = 1)
summary(pitcher_data$FD_points)
sd_summary->summary(batter_data$FD_points)
sd_summary$Std.Dev -> sd(batter_data$FD_points)
sd_summary
sd_summary->summary(batter_data$FD_points)
sd_summary=summary(batter_data$FD_points)
sd_summary$Std.Dev -> sd(batter_data$FD_points)
sd_summary=summary(batter_data$FD_points)
sd.summary<-data.frame(ids=names(sd_summary), nums=sd_summary)
sd_summary=summary(batter_data$FD_points)
sd.summary<-data.frame(ids=names(sd_summary), nums=sd_summary)
summary(batter_data$FD_points)
cat("Standard Deviation = ", sd(batter_data$FD_points))
summary(batter_data$FD_points)
cat("Standard Deviation = ", sd(batter_data$FD_points))
ggplot(pitcher_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-7, 25)) +
geom_histogram(binwidth = 1)
summary(pitcher_data$FD_points)
cat("Standard Deviation = ", sd(pitcher_data$FD_points))
summary(batter_data$FD_points)
cat("Standard Deviation = ", sd(batter_data$FD_points))
ggplot(batter_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-2, 15)) +
geom_histogram(binwidth = 0.25)
summary(batter_data$FD_points)
cat("Standard Deviation = ", sd(batter_data$FD_points))
ggplot(pitcher_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-7, 25)) +
geom_histogram(binwidth = 1)
summary(pitcher_data$FD_points)
cat("Standard Deviation = ", sd(pitcher_data$FD_points))
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(pitcher_data, aes(x=strike_outs, y=FD_points)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
stat_summary(fun.y = "mean", colour = "red")
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
stat_summary(fun.y = "mean",stat="summary", colour = "red")
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
stat_summary(fun.y = "mean",stat="summary", colour = "red") +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(batter_data, aes(x=rbi, y=FD_points),stat="summary", fun.y = "mean") +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(batter_data, aes(x=rbi, y=FD_points,stat="summary", fun.y = "mean")) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
geom_point(shape=1,stat="summary", fun.y = "mean") +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(pitcher_data, aes(x=strike_outs, y=FD_points)) +
geom_point(shape=1,stat="summary", fun.y = "mean")) +
geom_smooth(method=lm,
se=FALSE)
ggplot(pitcher_data, aes(x=strike_outs, y=FD_points)) +
geom_point(shape=1,stat="summary", fun.y = "mean") +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(rbi~FD_points,data=batter_data))$r.squared)
rbi_groups <- group_by(batter_data,rbi)
batter_data.rbi_mean <- summarize(rbi_groups,
rbi = rbi,
FD_points_mean = mean(FD_points))
rbi_groups <- group_by(batter_data,rbi)
batter_data.rbi_mean <- summarize(rbi_groups,
FD_points_mean = mean(FD_points))
batter_data.rbi_mean
ggplot(batter_data, aes(x=rbi, y=FD_points)) +
geom_point(shape=1,stat="summary", fun.y = "mean") + # summarize FD_points into mean
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
rbi_groups <- group_by(batter_data,rbi)
batter_data.rbi_mean <- summarize(rbi_groups,
FD_points_mean = mean(FD_points))
cat("r2 = ",summary(lm(rbi~FD_points_mean,data=batter_data.rbi_mean))$r.squared)
strike_outs_groups <- group_by(pitcher_data,strike_outs)
pitcher_data.strike_outs_mean <- summarize(strike_outs_groups,
FD_points_mean = mean(FD_points))
cat("r2 = ",summary(lm(strike_outs~FD_points_mean,data=pitcher_data.strike_outs_mean))$r.squared)
batter_groups <- group_by(batter_data,name)
batter_data.adv_stats_mean <- summarize(batter_groups,
obp_mean = mean(obp),
slg_mean = mean(slg),
ops_mean = mean(ops),
FD_points_mean = mean(FD_points))
ggplot(batter_data.adv_stats_mean, aes(x=obp_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(obp~FD_points_mean,
data=batter_data.adv_stats_mean))$r.squared)
batter_groups <- group_by(batter_data,name)
batter_data.adv_stats_mean <- summarize(batter_groups,
obp_mean = mean(obp),
slg_mean = mean(slg),
ops_mean = mean(ops),
FD_points_mean = mean(FD_points))
ggplot(batter_data.adv_stats_mean, aes(x=obp_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(obp_mean~FD_points_mean,
data=batter_data.adv_stats_mean))$r.squared)
batter_groups <- group_by(batter_data,name)
batter_data.adv_stats_mean <- summarize(batter_groups,
obp_mean = mean(obp),
slg_mean = mean(slg),
ops_mean = mean(ops),
FD_points_mean = mean(FD_points))
ggplot(batter_data.adv_stats_mean, aes(x=obp_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(obp_mean~FD_points_mean,
data=batter_data.adv_stats_mean))$r.squared)
ggplot(batter_data.adv_stats_mean, aes(x=slg_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(slg_mean~FD_points_mean,
data=batter_data.adv_stats_mean))$r.squared)
ggplot(batter_data.adv_stats_mean, aes(x=ops_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(ops_mean~FD_points_mean,
data=batter_data.adv_stats_mean))$r.squared)
pitcher_groups <- group_by(pitcher_data,display_name)
pitcher_data.adv_stats_mean <- summarize(pitcher_groups,
whip_mean = mean(whip),
FD_points_mean = mean(FD_points))
ggplot(pitcher_data.adv_stats_mean, aes(x=whip_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
cat("r2 = ",summary(lm(whip_mean~FD_points_mean,
data=pitcher_data.adv_stats_mean))$r.squared)
batter_data.OD.decoded = decode_wg_weather(batter_data)
ggplot(batter_data.OD.decoded, aes(x=temp, y=FD_points)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
batter_data.OD.decoded = decode_wg_weather(batter_data)
batter_data.OD.decoded$bin_temp <- cut(batter_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
temp_groups <- group_by(batter_data.OD.decoded,bin_temp)
batter_data.temp_meds <- summarize(temp_groups,
FD_points_median = median(FD_points))
batter_data.OD.decoded$bin_temp <- cut(batter_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
temp_groups <- group_by(batter_data.OD.decoded,bin_temp)
batter_data.temp_meds <- summarize(temp_groups,
FD_points_median = median(FD_points))
batter_data.OD.decoded = "decode_wg_weather(batter_data)"
batter_data.OD.decoded
batter_data.OD.decoded = decode_wg_weather(batter_data)
batter_data.OD.decoded$bin_temp <- cut(batter_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
batter_data = read.csv("baseball_batter.csv",stringsAsFactors = FALSE)
pitcher_data = read.csv("baseball_pitcher.csv",stringsAsFactors = FALSE)
batter_data.OD.decoded = decode_wg_weather(batter_data)
batter_data.OD.decoded$bin_temp <- cut(batter_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
temp_groups <- group_by(batter_data.OD.decoded,bin_temp)
batter_data.temp_meds <- summarize(temp_groups,
FD_points_median = median(FD_points))
ggplot(batter_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = batter_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
ggplot(batter_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 10)) +
geom_boxplot() +
geom_text(data = batter_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
batter_data.OD.decoded$bin_humd <- cut(batter_data.OD.decoded$humidity,c(0,10,20,30,40,50,60,70,80,90,100))
humd_groups <- group_by(batter_data.OD.decoded,bin_humd)
batter_data.temp_meds <- summarize(humd_groups,
FD_points_median = median(FD_points))
ggplot(batter_data.OD.decoded, aes(x=bin_humd, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = batter_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
batter_data.OD.decoded$bin_humd <- cut(batter_data.OD.decoded$humidity,c(0,10,20,30,40,50,60,70,80,90,100))
humd_groups <- group_by(batter_data.OD.decoded,bin_humd)
batter_data.humd_meds <- summarize(humd_groups,
FD_points_median = median(FD_points))
ggplot(batter_data.OD.decoded, aes(x=bin_humd, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = batter_data.humd_meds,
aes(x = bin_humd, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
batter_data.OD.decoded$bin_humd <- cut(batter_data.OD.decoded$humidity,c(0,10,20,30,40,50,60,70,80,90,100))
humd_groups <- group_by(batter_data.OD.decoded,bin_humd)
batter_data.humd_meds <- summarize(humd_groups,
FD_points_median = median(FD_points))
ggplot(batter_data.OD.decoded, aes(x=bin_humd, y=FD_points)) +
coord_cartesian(ylim = c(-2, 10)) +
geom_boxplot() +
geom_text(data = batter_data.humd_meds,
aes(x = bin_humd, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
pitcher_data.OD.decoded$bin_humd <- cut(pitcher_data.OD.decoded$humidity,c(0,10,20,30,40,50,60,70,80,90,100))
humd_groups <- group_by(pitcher_data.OD.decoded,bin_humd)
pitcher_data.humd_meds <- summarize(humd_groups,
FD_points_median = median(FD_points))
ggplot(pitcher_data.OD.decoded, aes(x=bin_humd, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = pitcher_data.humd_meds,
aes(x = bin_humd, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
pitcher_data.OD.decoded = decode_wg_weather(pitcher_data)
pitcher_data.OD.decoded$bin_temp <- cut(pitcher_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
temp_groups <- group_by(pitcher_data.OD.decoded,bin_temp)
pitcher_data.temp_meds <- summarize(temp_groups,
FD_points_median = median(FD_points))
ggplot(pitcher_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = pitcher_data.temp_meds,
aes(x = temp_humd, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
ggplot(pitcher_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = pitcher_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
summary(pitcher_data$FD_points)
ggplot(pitcher_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-7, 25)) +
geom_histogram(binwidth = 1)
ggplot(pitcher_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = pitcher_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
pitcher_data.OD.decoded$bin_humd <- cut(pitcher_data.OD.decoded$humidity,c(0,10,20,30,40,50,60,70,80,90,100))
humd_groups <- group_by(pitcher_data.OD.decoded,bin_humd)
pitcher_data.humd_meds <- summarize(humd_groups,
FD_points_median = median(FD_points))
ggplot(pitcher_data.OD.decoded, aes(x=bin_humd, y=FD_points)) +
coord_cartesian(ylim = c(-2, 15)) +
geom_boxplot() +
geom_text(data = pitcher_data.humd_meds,
aes(x = bin_humd, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
wind_spiral_plot <-function(df){
wind_speed_bins = c(-Inf,4,6,8,10,12,Inf)
df$bin_wind_speed = cut(df$wind_speed,wind_speed_bins) #Bin wind speeds
df.wind_speed_groups = split(df,f=df$bin_wind_speed)
wind_df = data.frame()
for(i in 1:length(df.wind_speed_groups)) #Loop through each wind speed dataframe
{
wind_dir_groups <- with(df.wind_speed_groups[[i]],
cut(wind_dir,c(0,25,50,75,100,125,150,175,
200,225,250,275,300,325,359),
include.lowest = TRUE))
dat <- aggregate(FD_points ~ wind_dir_groups,
data = df.wind_speed_groups[[i]], FUN = mean)
#Summarize FD_points per wind angle
dat$wind_speed_group_indx = wind_speed_bins[i]
wind_df<-rbind(wind_df,dat)
}
return (ggplot(wind_df,aes(x = wind_dir_groups, y = FD_points)) +
geom_bar(stat='identity') + coord_polar(start = 0) +
facet_wrap(~wind_speed_group_indx))
}
wind_spiral_plot(batter_data.OD.decoded)
wind_spiral_plot_formatted <-function(df){
wind_spiral_plot(df) +
aes(fill=wind_speed_group_indx) +
guides(fill=guide_legend(title="Wind Speed")) +
ggtitle("Batter FD_points vs Wind speed and Direction") +
scale_x_discrete(breaks=c("(75,100]","(150,175]","(275,300]","(325,359]")) +
theme(strip.background = element_blank(),strip.text.x = element_blank()) +
xlab("")
}
wind_spiral_plot_formatted(batter_data.OD.decoded)
batter_data.adv_stats_mean.clean = subset(batter_data.adv_stats_mean,
isnumeric(slg_mean) & slg_mean >
0 & slg_mean < 0.7)
#clean up NA and outlier values
y = batter_data.adv_stats_mean.clean$FD_points_mean
x = batter_data.adv_stats_mean.clean$slg_mean
xy = batter_data.adv_stats_mean.clean
linear <- lm(y ~ x, data = xy)
quadratic <- lm(y ~ I(x^2), data = xy)
exponential <- lm(y~I(exp(x)),data=xy)
linear_r2_text = paste("lin_",
toString(round(summary(linear)$r.squared,digits=2)))
quadratic_r2_text = paste("quad_",
toString(round(summary(quadratic)$r.squared,digits=2)))
exponential_r2_text = paste("exp_",
toString(round(summary(exponential)$r.squared,digits=2)))
r2_text = paste(quadratic_r2_text,exponential_r2_text,linear_r2_text,sep="\n")
prd <- data.frame(x = seq(0, 0.7, by = 0.05))
result <- prd
result$linear <- predict(linear, newdata = prd)
result$quadratic <- predict(quadratic, newdata = prd)
result$exponential <- predict(exponential, newdata = prd)
result <-  melt(result, id.vars = "x", variable.name = "model",
value.name = "fitted")
ggplot(result, aes(x = x, y = fitted)) +
theme_bw() +
geom_point(data = xy, aes(x = x, y = y)) +
geom_line(aes(colour = model), size = 1) +
annotate("text", x = 0.65, y = 3.5, label = r2_text) +
xlab("Batter SLG %") +
ylab("FD_points") +
ggtitle("Batter FD_points vs SLG") +
ylim(c(-1,4))
circleFun <- function(center = c(0,0),diameter = 1, npoints = 100){
r = diameter / 2
tt <- seq(0,2*pi,length.out = npoints)
xx <- center[1] + r * cos(tt)
yy <- center[2] + r * sin(tt)
return(data.frame(x = xx, y = yy))
}
pitcher_data.adv_stats_mean.clean = subset(pitcher_data.adv_stats_mean,isnumeric(whip_mean) & whip_mean >
0 & whip_mean <=5)
#clean up NA and outlier values
dat <- circleFun(c(1.4,1.38),1.6,npoints = 100)
ggplot(pitcher_data.adv_stats_mean.clean, aes(x=whip_mean, y=FD_points_mean)) +
geom_point(shape=1) +
geom_path(data=dat,aes(x,y),color="red",size=2) +
xlab("Pitcher WHIP") +
ylab("FD_points") +
ggtitle("Pitcher FD_points vs WHIP") +
ylim(c(-5,15))
wind_spiral_plot_formatted <-function(df){
wind_spiral_plot(df) +
aes(fill=wind_speed_group_indx) +
guides(fill=guide_legend(title="Wind Speed m/s")) +
ggtitle("Batter Fanduel points vs Wind speed and Direction") +
scale_x_discrete(breaks=c("(75,100]","(150,175]","(275,300]","(325,359]")) +
theme(strip.background = element_blank(),strip.text.x = element_blank()) +
xlab("")
}
wind_spiral_plot_formatted(batter_data.OD.decoded)
wind_spiral_plot_formatted <-function(df){
wind_spiral_plot(df) +
aes(fill=wind_speed_group_indx) +
guides(fill=guide_legend(title="Wind Speed m/s")) +
ggtitle("Batter Fanduel points vs Wind speed and Direction") +
scale_x_discrete(breaks=c("(75,100]","(150,175]","(275,300]","(325,359]")) +
theme(strip.background = element_blank(),strip.text.x = element_blank()) +
xlab("") +
ylab("Fanduel Points")
}
wind_spiral_plot_formatted(batter_data.OD.decoded)
batter_data.OD.decoded = decode_wg_weather(batter_data)
ggplot(batter_data.OD.decoded, aes(x=temp, y=FD_points)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
batter_data = read.csv("baseball_batter.csv",stringsAsFactors = FALSE)
pitcher_data = read.csv("baseball_pitcher.csv",stringsAsFactors = FALSE)
open_air_stadiums = read.csv("open_air_stadiums.csv")
#install.packages("ggplot2",repos='http://cran.us.r-project.org')
#install.packages("dplyr",repos='http://cran.us.r-project.org')
#install.packages("RJSONIO",repos='http://cran.us.r-project.org')
#install.packages("devtools",repos='http://cran.us.r-project.org')
library(ggplot2)
library(reshape2)
library(dplyr)
library(RJSONIO)
naIfnull <- function(x){if(!is.null(x)) x else NA}
isnumeric <- function(x) is.numeric(x) & !is.na(x)
multi_hist <- function(data_cols,df){
d <- melt(df[,data_cols])
ggplot(d,aes(x = value)) +
facet_wrap(~variable,scales = "free_x") +
geom_histogram()
}
decode_wg_weather<-function(df){
df.OD <-subset(df ,df$stadium %in% open_air_stadiums[,c("Stadium")] & df$wunderground_forecast !="") #Filter player data for only stadiums that are open air only and remove weather rows
vals <- lapply(df.OD$wunderground_forecast,fromJSON)
#Transform decoded json vals into dataframe with select fields
res <- do.call(rbind,
lapply(vals,FUN=function(v){ v <- as.list(v)
data.frame(wind_speed = naIfnull(v$wind[1]),
wind_dir = naIfnull(v$wind[2]),
temp =naIfnull(v$temp),
humidity  =naIfnull(v$humidity))}))
return (cbind(df.OD,res)) #Add weather dataframe to original and return result
}
```
<h1>Univarate Parameter Analysis</h1>
<h2>Player Fanduel Points</h2>
```{r echo=FALSE, message=FALSE, warning=FALSE, uni_FD_points}
ggplot(batter_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-2, 15)) +
geom_histogram(binwidth = 0.25)
summary(batter_data$FD_points)
cat("Standard Deviation = ", sd(batter_data$FD_points))
ggplot(pitcher_data,aes(x = FD_points)) +
coord_cartesian(xlim = c(-7, 25)) +
geom_histogram(binwidth = 1)
summary(pitcher_data$FD_points)
cat("Standard Deviation = ", sd(pitcher_data$FD_points))
batter_data.OD.decoded = decode_wg_weather(batter_data)
ggplot(batter_data.OD.decoded, aes(x=temp, y=FD_points)) +
geom_point(shape=1) +
geom_smooth(method=lm,
se=FALSE)
View(decode_wg_weather)
batter_data.OD.decoded$bin_temp <- cut(batter_data.OD.decoded$temp,c(25,35,45,55,65,75,85,95,105))
temp_groups <- group_by(batter_data.OD.decoded,bin_temp)
batter_data.temp_meds <- summarize(temp_groups,
FD_points_median = median(FD_points))
ggplot(batter_data.OD.decoded, aes(x=bin_temp, y=FD_points)) +
coord_cartesian(ylim = c(-2, 10)) +
geom_boxplot() +
geom_text(data = batter_data.temp_meds,
aes(x = bin_temp, y = FD_points_median,
label = FD_points_median),
size = 3, vjust = -1.5)
wind_spiral_plot_formatted <-function(df){
wind_spiral_plot(df) +
aes(fill=wind_speed_group_indx) +
guides(fill=guide_legend(title="Wind Speed m/s")) +
ggtitle("Batter Fanduel points vs Wind speed and Direction") +
scale_x_discrete(breaks=c("(75,100]","(150,175]","(275,300]","(325,359]")) +
theme(strip.background = element_blank(),strip.text.x = element_blank()) +
xlab("") +
ylab("Fanduel Points")
}
wind_spiral_plot_formatted(batter_data.OD.decoded)
library("ggplot2", lib.loc="~/R/win-library/3.2")
